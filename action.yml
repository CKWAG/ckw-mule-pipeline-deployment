# This workflow will build a MuleSoft project and deploy to sandbox environment
name: Run the required steps for deploying an mule-app in the sandbox env
description: primary calling maven

inputs:
  muleServer:
    # Possible Values
    ## onprem
    ## azure
    ## CloudHub
    required: true
    type: string  
  muleEnvProperties:
    # Possible Values
    ## dev
    ## qa
    ## prod
    required: true
    type: string
  muleDocumentation:
    # Possible Values
    ## DesignCenter
    ## GitHub
    required: true
    type: string
  anypointClientId:
    required: true
  anypointClientSecret:
    required: true
  apimanagerClientId:
    required: true
  apimanagerClientSecret:
    required: true
  ghUser:
    required: true
  ghPassword:
    required: true
  encryptSecret:
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout Deployment Bash Scripts for the Design Center Documentation
      uses: actions/checkout@v3
      with:
        repository: CKWAG/ckw-mule-pipeline-deployment
        path: docu-deployment

    - name: Deploy the Mule-App to Exchange and the RuntimeManager
      run: |
        #internal used variables
        MAVEN_PROFILE="CloudHubSand"
        MAVEN_DOCU_PROFILE="${MULE_DOCUMENTATION}Docu"
        DOCU_MAVEN_GOAL="deploy"
        DOCU_MAVEN_PROFILE="ExchangeDeploy"
        ADDITIONAL_MAVEN_ARGS=""

        echo "environment: '$MULE_ENV', Runtime: '$MULE_SERVER', Documentation-Source: '$MULE_DOCUMENTATION', MavenDocuProfile: '$MAVEN_DOCU_PROFILE"
        if [[ $MULE_SERVER == "onprem" ]] || [[ $MULE_SERVER == "azure" ]]; then
           MAVEN_PROFILE="RuntimeManager"
           if [[ $MULE_ENV == "prod" ]]; then
              ADDITIONAL_MAVEN_ARGS="-Danypoint.target=ckw-$MULE_SERVER-prod"
           else
              ADDITIONAL_MAVEN_ARGS="-Danypoint.target=ckw-$MULE_SERVER-test"
           fi
        elif [[ $MULE_SERVER == "CloudHub" ]] && [[ $MULE_ENV == "prod" ]]; then
            MAVEN_PROFILE="CloudHubProd"
        else
            echo "CloudHub-Sandbox Deployment"
           
        fi

        if [[ $MULE_DOCUMENTATION == "DesignCenter" ]]; then
            DOCU_MAVEN_GOAL="exec:exec"
            DOCU_MAVEN_PROFILE=$MAVEN_DOCU_PROFILE
        fi

        # some debug information
        echo "DOCU_MAVEN_GOAL='$DOCU_MAVEN_GOAL', MAVEN_DOCU_PROFILE='$MAVEN_DOCU_PROFILE', MAVEN_PROFILE='$MAVEN_PROFILE', MULE_ENV='$MULE_ENV', ADDITIONAL_MAVEN_ARGS='$ADDITIONAL_MAVEN_ARGS'"

        if [[ $MULE_ENV == "prod" ]]; then
            echo "Production deployment"
            # first create a tag in git and deploy the artefact into the RuntimeManager
            mvn --batch-mode release:clean release:prepare release:perform -e -Dgh.user=$GH_USER -Dgh.pw=$GH_PASSWORD -Dgoals="deploy" -Darguments="--batch-mode -P MuleBuild,$MAVEN_PROFILE,$MAVEN_DOCU_PROFILE -DencryptSecret=$ENCRYPTSECRET -DmuleDeploy -Danypoint.AppClientId=$ANYPOINT_CLIENTID -Danypoint.AppClientSecret=$ANYPOINT_CLIENTSECRET -Danypoint.ApiManagerClientId=$APIMANAGER_CLIENTID -Danypoint.ApiManagerClientSecret=$APIMANAGER_CLIENTSECRET -Danypoint.environment=Production -Dmule.env=$MULE_ENV $ADDITIONAL_MAVEN_ARGS"
            #second upload the documentation into Exchange
            mvn --batch-mode $DOCU_MAVEN_GOAL  -e -f target/checkout/ -P $DOCU_MAVEN_PROFILE -Dpipeline.script.subfolder='/../..' -Danypoint.AppClientId=$ANYPOINT_CLIENTID -Danypoint.AppClientSecret=$ANYPOINT_CLIENTSECRET
        else
            echo "Sandbox deployment"
            # first deploy the mule-app in the RuntimeManager
             mvn --batch-mode clean deploy -e -P MuleBuild,$MAVEN_PROFILE,$MAVEN_DOCU_PROFILE -DmuleDeploy -Danypoint.environment=Sandbox -Dmule.env=$MULE_ENV -Danypoint.AppClientId=$ANYPOINT_CLIENTID -Danypoint.encryptSecret=$encrypSecret -Danypoint.AppClientSecret=$ANYPOINT_CLIENTSECRET -Danypoint.ApiManagerClientId=$APIMANAGER_CLIENTID -Danypoint.ApiManagerClientSecret=$APIMANAGER_CLIENTSECRET $ADDITIONAL_MAVEN_ARGS
            # second upload the documentation into Exchange
            mvn --batch-mode $DOCU_MAVEN_GOAL -e -P $DOCU_MAVEN_PROFILE -Dpipeline.script.subfolder='' -Danypoint.AppClientId=$ANYPOINT_CLIENTID -Danypoint.AppClientSecret=$ANYPOINT_CLIENTSECRET
         fi
      env:
        MULE_SERVER: ${{ inputs.muleServer }}
        MULE_ENV: ${{ inputs.muleEnvProperties }}
        MULE_DOCUMENTATION: ${{ inputs.muleDocumentation }}
        ANYPOINT_CLIENTID: ${{ inputs.anypointClientId }}
        ANYPOINT_CLIENTSECRET: ${{ inputs.anypointClientSecret }}
        APIMANAGER_CLIENTID: ${{ inputs.apimanagerClientId }}
        APIMANAGER_CLIENTSECRET: ${{ inputs.apimanagerClientSecret }}
        GH_USER: ${{ inputs.ghUser }}
        GH_PASSWORD: ${{ inputs.ghPassword }}
        ENCRYPTSECRET: ${{ inputs.encryptSecret }}
      shell: bash
 
    - name: upload the generated target-sites to the workspace
      uses: actions/upload-artifact@v3
      with:
        name: QualityResults
        path: target/site/
